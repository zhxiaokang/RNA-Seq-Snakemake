data(aSAH)
roc(aSAH$outcome, aSAH$s100b)
roc(outcome ~ s100b, aSAH)
# Smooth ROC curve
roc(outcome ~ s100b, aSAH, smooth=TRUE)
# more options, CI and plotting
roc1 <- roc(aSAH$outcome,
aSAH$s100b, percent=TRUE,
# arguments for auc
partial.auc=c(100, 90), partial.auc.correct=TRUE,
partial.auc.focus="sens",
# arguments for ci
ci=TRUE, boot.n=100, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE)
roc(aSAH$outcome, aSAH$s100b)
roc(outcome ~ s100b, aSAH)
# Smooth ROC curve
roc(outcome ~ s100b, aSAH, smooth=TRUE)
# more options, CI and plotting
roc1 <- roc(aSAH$outcome,
aSAH$s100b, percent=TRUE,
# arguments for auc
partial.auc=c(100, 90), partial.auc.correct=TRUE,
partial.auc.focus="sens",
# arguments for ci
ci=TRUE, boot.n=100, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,smooth = TRUE)
system.time(rocobj <- roc(response, round(predictor)))
system.time(rocobj <- roc(labels, pred)
)
system.time(rocobj <- roc(aSAH$outcome, aSAH$s100b))
system.time(rocobj <- roc(aSAH$outcome, aSAH$s100b, algorithm = 2))
system.time(rocobj <- roc(labels, pred, algorithm = 2))
roc(aSAH$outcome, aSAH$s100b)
roc(outcome ~ s100b, aSAH)
# Smooth ROC curve
roc(outcome ~ s100b, aSAH, smooth=TRUE)
# more options, CI and plotting
roc1 <- roc(aSAH$outcome,
aSAH$s100b, percent=TRUE,
# arguments for auc
partial.auc=c(100, 90), partial.auc.correct=TRUE,
partial.auc.focus="sens",
# arguments for ci
ci=TRUE, boot.n=100, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,smooth = TRUE, algorithm = 3)
roc(aSAH$outcome, aSAH$s100b)
roc(outcome ~ s100b, aSAH)
# Smooth ROC curve
roc(outcome ~ s100b, aSAH, smooth=TRUE)
# more options, CI and plotting
roc1 <- roc(aSAH$outcome,
aSAH$s100b, percent=TRUE,
# arguments for auc
partial.auc=c(100, 90), partial.auc.correct=TRUE,
partial.auc.focus="sens",
# arguments for ci
ci=TRUE, boot.n=100, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,smooth = TRUE, algorithm = 2)
roc(aSAH$outcome, aSAH$s100b)
roc(outcome ~ s100b, aSAH)
# Smooth ROC curve
roc(outcome ~ s100b, aSAH, smooth=TRUE)
# more options, CI and plotting
roc1 <- roc(aSAH$outcome,
aSAH$s100b, percent=TRUE,
# arguments for auc
partial.auc=c(100, 90), partial.auc.correct=TRUE,
partial.auc.focus="sens",
# arguments for ci
ci=TRUE, boot.n=100, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,smooth = TRUE, algorithm = 1)
pred[1]
pred[2]<-0
pred[2]<-1
roc(pred,labels)
roc(aSAH$outcome, aSAH$s100b)
roc(outcome ~ s100b, aSAH)
# Smooth ROC curve
roc(outcome ~ s100b, aSAH, smooth=TRUE)
# more options, CI and plotting
roc1 <- roc(pred,
labels, percent=TRUE,
# arguments for auc
partial.auc=c(100, 90), partial.auc.correct=TRUE,
partial.auc.focus="sens",
# arguments for ci
ci=TRUE, boot.n=100, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,smooth = TRUE, algorithm = 2)
roc(aSAH$outcome, aSAH$s100b)
roc(outcome ~ s100b, aSAH)
# Smooth ROC curve
roc(outcome ~ s100b, aSAH, smooth=TRUE)
# more options, CI and plotting
roc1 <- roc(pred,
labels, percent=TRUE,
# arguments for auc
partial.auc=c(100, 90), partial.auc.correct=TRUE,
partial.auc.focus="sens",
# arguments for ci
ci=TRUE, boot.n=100, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,smooth = FALSE, algorithm = 2)
library(GeoDE)
data(example_expression_data)
remove(list=ls())
data(example_expression_data)
data(example_sampleclass)
data(example_gammas)
example_gammas
head(example_expression_data)
example_sampleclass
chdir_analysis_example <- chdirAnalysis(example_expression_data,example_sampleclass,example_gammas ,CalculateSig=TRUE,nnull=10)
lapply(chdir_analysis_example$results, function(x) x[1:10])
chdir_analysis_example$results
length(chdir_analysis_example$results)
nrow(chdir_analysis_example$results)
ncol(chdir_analysis_example$results)
size(chdir_analysis_example$results)
lapply(chdir_analysis_example$chdirprops[[1]],head)
chdir_analysis_example$chdirprops$number_sig_genes
length(example_expression_data$genenames)
chdirAnalysis(datain, sampleclass, gammas = list(1), nnull = 10, CalculateSig = FALSE)
chdirAnalysis(datain, example_sampleclass, gammas = list(1), nnull = 10, CalculateSig = FALSE)
chdirAnalysis(example_expression_data, example_sampleclass, gammas = list(1), nnull = 10, CalculateSig = FALSE)
class(example_sampleclass)
q()
library(ROCR)
data(ROCR.simple)
pred <- prediction( ROCR.simple$predictions, ROCR.simple$labels)
perf <- performance(pred,"tpr","fpr")
plot(perf)
ROCR.simple$predictions
ROCR.simple$labels
ROCR.simple$predictions
pred <- prediction( ROCR.simple$predictions, ROCR.simple$labels)
pred<-c(1,0,1,1)
label<-c(10,1,0)
label<-c(1,0,1,0)
preds<-prediction(pred,label)
preds
perf <- performance(preds,"tpr","fpr")
perf
library('pROC')
data(aSAH)
# Syntax (response, predictor):
auc(aSAH$outcome, aSAH$s100b)
auc(pred,label)
q()
data("iris")
head(iris)
View(iris)
ird <- data.frame(rbind(iris3[,,1], iris3[,,2], iris3[,,3]),
species = factor(c(rep("s",50), rep("c", 50), rep("v", 50))))
iris3
iris
iris1
iris3[,,1]
iris3[,,2]
x<-matrix(c(1,2,3,4),2,2)
y<-matrix(c(5,6,7,8),2,2)
cbind(x,y)
rbind(x,y)
View(ird)
View(ird)
View(iris)
data(diamonds)
library(ggplot2)
data(diamonds)
class(diamonds)
library(data.table)
dataframe<-data.table(diamonds)
class(dataframe)
test<-data.frame(student=c('xiaoming','xiaohong','xiaogang'),math=c(89,90,78),english=c(97,69,90))
test
?tableGrod
??tableGrod
grid.arrange(test)
?tableGrob
library(gridExtra)
tableGrob(test)
grid.table(test)
text<-tableGrob(test)
grid.arrange(text)
grid.arrange(text)
text<-tableGrob(test,rows=NULL)
grid.arrange(text)
grid.table(test,rows=NULL)
??grid.table
q()
source("http://bioconductor.org/biocLite.R")
biocLite("GOSemSim")
library(GOSemSim)
go1<-c('GO:0005739','GO:0005777','GO:0004169','GO:0006493')
go2<-c('GO:0005739','GO:0005777','GO:0004169','GO:0006499')
mgoSim(go1,go2,ont='MF',organism='human',measure='Wang')
mgoSim(go1,go2,measure = 'Wang')
?mgoSim
d <- godata('org.Hs.eg.db', ont="MF", computeIC=FALSE)
install.packages('org.Hs.eg.db')
source("http://bioconductor.org/biocLite.R")
biocLite('org.Hs.eg.db')
d <- godata('org.Hs.eg.db', ont="MF", computeIC=FALSE)
mgoSim(go1, go2, semData=d, measure="Wang")
go1
go2
mgoSim(go1, go2, semData=d, measure="Resnik")
mgoSim(go1, go2, semData=d, measure="Lin")
mgoSim(go1, go2, semData=d, measure="Wang")
mgoSim(go1, go2, semData=d, measure="Jiang")
?godata
d <- godata('org.Hs.eg.db', ont="BP", computeIC=FALSE)
mgoSim(go1, go2, semData=d, measure="Wang")
d <- godata('org.Hs.eg.db', ont="CC", computeIC=FALSE)
mgoSim(go1, go2, semData=d, measure="Wang")
d <- godata('org.Hs.eg.db', ont="BP", computeIC=TRUE)
mgoSim(go1, go2, semData=d, measure="Wang")
d <- godata('org.Hs.eg.db', ont="MF", computeIC=TRUE)
mgoSim(go1, go2, semData=d, measure="Wang")
go2<-c('GO:0005739','GO:0005777','GO:0004169','GO:0006490')
mgoSim(go1, go2, semData=d, measure="Wang")
go2<-c('GO:0005739','GO:0005777','GO:0004169','GO:0008490')
mgoSim(go1, go2, semData=d, measure="Wang")
go2<-c('GO:0005739','GO:0005777','GO:0004169','0008490')
mgoSim(go1, go2, semData=d, measure="Wang")
go2<-c('GO:0005739','GO:0005777','0004169','0008490')
go2<-c('GO:0005739','0005777','0004169','0008490')
go2<-c('0005739','0005777','0004169','0008490')
mgoSim(go1, go2, semData=d, measure="Wang")
go2<-c('GO:0005739','0005777','0004169','0008490')
mgoSim(go1, go2, semData=d, measure="Wang")
go2<-c('GO:0005739','GO:0005777','0004169','0008490')
mgoSim(go1, go2, semData=d, measure="Wang")
1/3
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
exit
quit
q()
lens <- c(900, 1020, 2000, 770, 3000, 1777)
sum(lens)
sum(lens)/len(lens)
sum(lens)/length(lens)
length(lens)
control<-c(0,0,0,0,0,1,1,1)
drug<-c(0,0,0,0,1,1,1,1)
control<-data.frame(control)
drug<-data.frame(drug)
df<-rbind(data.frame(fill='green',obs=control$control),data.frame(fill='red',obs=drug$drug))
ggplot(df, aes(x=obs, fill=fill)) +
geom_histogram(binwidth=1, colour="black", position="dodge") +
scale_fill_identity()
library(ggplot)
library(ggplot2)
ggplot(df, aes(x=obs, fill=fill)) +
geom_histogram(binwidth=1, colour="black", position="dodge") +
scale_fill_identity()
View(control)
ggplot(df, aes(x=obs, fill=fill)) +
geom_histogram(binwidth=.1, colour="black", position="dodge") +
scale_fill_identity()
View(control)
which(control$control==1)
length(control$control)
length(control$control==1)
length(control==1)
seq(1,100)
q()
getwd()
setwd('/Users/xzh004/Desktop/research/dCod/RNA-Seq_analysis/UiB_Goksoyr_dCod_1_2017/PCLS_BaP-EE2_RNAseq/oldTrans/countFile/combined_mergeCount_noZero')
library(DESeq2)
# the fish group of samples, needs to be changed later ------ ask Eileen to modify the
# code to sort the samples in numeric order
groupControl <- c('1', '3', '4', '5', '6', '7', '8', '2')
groupTreat <- c('2', '3', '4', '5', '6', '8')
groupControl <- groupControl[groupControl %in% groupTreat]
# load the count file
control <- read.table('./control_BaP_EE2_1000.txt', header = T)
rownames(control) <- control[, 1]
control <- control[, -1]
control <- control[-c(1,6)]  # the fish of these two samples are not present in treat
treat <- read.table('./BaP_EE2_1000.txt', header = T)
rownames(treat) <- treat[, 1]
treat <- treat[, -1]
# the count table, each row is a gene, and each row is one sample
countData<- cbind(control, treat)
# get the sample id
samples <- colnames(countData)
# get the fish group
fishGroup <- c(groupControl, groupTreat)
# generate the experiment group
expGroup <- c(rep('control', ncol(control)), rep('treat', ncol(treat)))
# get the colData mixing the above 3 data
colData <- data.frame(samples, fishGroup, expGroup)
# creat the DESeqDataSet
dds_indp <- DESeqDataSetFromMatrix(countData, colData, design = ~ expGroup)
dds_paird <- DESeqDataSetFromMatrix(countData, colData, design = ~ fishGroup + expGroup)
#
View(treat)
# code to sort the samples in numeric order
groupControl <- c('1', '3', '4', '5', '6', '7', '8', '2')
groupTreat <- c('2', '3', '4', '5', '6', '8')
groupControl <- groupControl[groupControl %in% groupTreat]
# load the count file
control <- read.table('./control_BaP_EE2_1000.txt', header = F)
rownames(control) <- control[, 1]
control <- control[, -1]
control <- control[-c(1,6)]  # the fish of these two samples are not present in treat
treat <- read.table('./BaP_EE2_1000.txt', header = F)
rownames(treat) <- treat[, 1]
treat <- treat[, -1]
# the count table, each row is a gene, and each row is one sample
countData<- cbind(control, treat)
# get the sample id
samples <- colnames(countData)
# get the fish group
fishGroup <- c(groupControl, groupTreat)
# generate the experiment group
expGroup <- c(rep('control', ncol(control)), rep('treat', ncol(treat)))
# get the colData mixing the above 3 data
colData <- data.frame(samples, fishGroup, expGroup)
# creat the DESeqDataSet
dds_indp <- DESeqDataSetFromMatrix(countData, colData, design = ~ expGroup)
dds_paird <- DESeqDataSetFromMatrix(countData, colData, design = ~ fishGroup + expGroup)
setwd('/Users/xzh004/Desktop/research/Snakemake/RNA-Seq-Snakemake/workflow/PCLS_BaP-EE2_RNAseq/oldTrans/DEA')
countTable <- read.table('./Mix_high_VS_control', header = T)
countTable <- read.table('./Mix_high_VS_control', header = T)
countTable <- read.table('./Mix_high_VS_control', header = T)
rownames(countTable) <- countTable[,1]
rm(list=ls())
countTable <- read.table('./Mix_high_VS_control', header = T)
rownames(countTable) <- countTable[,1]
View(countTable)
countTable <- read.table('./Mix_high_VS_control', header = T)
View(countTable)
geneList <- countTable[,1]
geneList[4]
rownames(countTable) <- countTable[,1]
geneList <- rownames(countTable)
View(countTable)
samples <- colnames(countTable)
numSample <- length(samples)
rownames(countTable) <- countTable[,1]
countTable <- countTable[,-1] # remove Gene_id column to get pure count table
geneList <- rownames(countTable)
samples <- colnames(countTable)
numSample <- length(samples)
seq(1,4)
groupTreat <- seq(1, numSample/2)  # index different fish group
groupControl <- seq(1, numSample/2)  # make sure that treat and control group are in pairs
fishGroup <- c(groupTreat, groupControl)
expGroup <- c(rep('treat', numSample/2), rep('control', numSample/2))
colData <- data.frame(samples, fishGroup, expGroup)
View(colData)
expGroup <- c(rep('treat', numSample/2), rep('control', numSample/2))
colData <- data.frame(samples, fishGroup, expGroup)
dds_paird <- DESeqDataSetFromMatrix(countData, colData, design = ~ fishGroup + expGroup)
dea_paired <- DESeq(dds_paird)
countData<-countTable
dds_paird <- DESeqDataSetFromMatrix(countData, colData, design = ~ fishGroup + expGroup)
seq(1,4)
fishGroup <- toString(c(groupTreat, groupControl))
expGroup <- c(rep('treat', numSample/2), rep('control', numSample/2))
colData <- data.frame(samples, fishGroup, expGroup)
dds_paird <- DESeqDataSetFromMatrix(countData, colData, design = ~ fishGroup + expGroup)
fishGroup <- c(groupTreat, groupControl)
fishGroup
fishGroup <- toString(fishGroup)
fishGroup
dds_paird <- DESeqDataSetFromMatrix(countData, colData, design = ~ fishGroup + expGroup)
groupTreat <- toString(seq(1, numSample/2))  # index different fish group
groupTreat
groupControl
groupTreat <- seq(1, numSample/2)  # index different fish group
groupControl <- seq(1, numSample/2)  # make sure that treat and control group are in pairs
fishGroup <- as.string(c(groupTreat, groupControl))
groupTreat <- seq(1, numSample/2)  # index different fish group
groupControl <- seq(1, numSample/2)  # make sure that treat and control group are in pairs
fishGroup <- c(groupTreat, groupControl)
fishGroup
chr(fishGroup)
as.character(fishGroup)
fishGroup <- as.character(c(groupTreat, groupControl))
dds_paird <- DESeqDataSetFromMatrix(countData, colData, design = ~ fishGroup + expGroup)
fishGroup
expGroup <- c(rep('treat', numSample/2), rep('control', numSample/2))
colData <- data.frame(samples, fishGroup, expGroup)
dds_paird <- DESeqDataSetFromMatrix(countData, colData, design = ~ fishGroup + expGroup)
dea_paired <- DESeq(dds_paird)
getwd()
res_paired <- results(dea_paired)
padj_paired <- res_paired$padj
sig_paired <- geneList[which(padj_paired < 0.05)]
save(res_paired,'result')
write.csv(res_paired,'res.csv')
?write.csv
write.csv(res_paired,'res.csv',sep='\t')
write.table(res_paired,'res.csv',sep='\t')
write.table(res_paired,'res.txt',sep='\t')
write.csv(res_paired,'res.csv')
countTable <- read.table('./BaP_high_VS_control', header = T)
rownames(countTable) <- countTable[,1]
countData <- countTable[,-1] # remove Gene_id column to get pure count table
# save gene list in geneList for extracting gene names later
geneList <- rownames(countTable)
# get the sample id
samples <- colnames(countTable)
# get the fish group
numSample <- length(samples)
groupTreat <- seq(1, numSample/2)  # index different fish group
groupControl <- seq(1, numSample/2)  # make sure that treat and control group are in pairs
fishGroup <- as.character(c(groupTreat, groupControl))
# generate the experiment group
expGroup <- c(rep('treat', numSample/2), rep('control', numSample/2))
# get the colData mixing the above 3 data
colData <- data.frame(samples, fishGroup, expGroup)
# creat the DESeqDataSet
dds_paird <- DESeqDataSetFromMatrix(countData, colData, design = ~ fishGroup + expGroup)
countTable <- read.table('./BaP_high_VS_control', header = T)
rownames(countTable) <- countTable[,1]
countData <- countTable[,-1] # remove Gene_id column to get pure count table
# save gene list in geneList for extracting gene names later
geneList <- rownames(countData)
# get the sample id
samples <- colnames(countData)
# get the fish group
numSample <- length(samples)
groupTreat <- seq(1, numSample/2)  # index different fish group
groupControl <- seq(1, numSample/2)  # make sure that treat and control group are in pairs
fishGroup <- as.character(c(groupTreat, groupControl))
# generate the experiment group
expGroup <- c(rep('treat', numSample/2), rep('control', numSample/2))
# get the colData mixing the above 3 data
colData <- data.frame(samples, fishGroup, expGroup)
# creat the DESeqDataSet
dds_paird <- DESeqDataSetFromMatrix(countData, colData, design = ~ fishGroup + expGroup)
countTable <- read.table('./BaP_low_VS_control', header = T)
rownames(countTable) <- countTable[,1]
countData <- countTable[,-1] # remove Gene_id column to get pure count table
# save gene list in geneList for extracting gene names later
geneList <- rownames(countData)
# get the sample id
samples <- colnames(countData)
# get the fish group
numSample <- length(samples)
groupTreat <- seq(1, numSample/2)  # index different fish group
groupControl <- seq(1, numSample/2)  # make sure that treat and control group are in pairs
fishGroup <- as.character(c(groupTreat, groupControl))
# generate the experiment group
expGroup <- c(rep('treat', numSample/2), rep('control', numSample/2))
# get the colData mixing the above 3 data
colData <- data.frame(samples, fishGroup, expGroup)
# creat the DESeqDataSet
dds_paird <- DESeqDataSetFromMatrix(countData, colData, design = ~ fishGroup + expGroup)
# perform DEA
dea_paired <- DESeq(dds_paird)
# result analysis
res_paired <- results(dea_paired)
# p-adjusted value
padj_paired <- res_paired$padj
# significantly expressed genes
sig_paired <- geneList[which(padj_paired < 0.05)]
countTable <- read.table('./BaP_high_VS_control', header = T)
rownames(countTable) <- countTable[,1]
countData <- countTable[,-1] # remove Gene_id column to get pure count table
# save gene list in geneList for extracting gene names later
geneList <- rownames(countData)
# get the sample id
samples <- colnames(countData)
# get the fish group
numSample <- length(samples)
groupTreat <- seq(1, numSample/2)  # index different fish group
groupControl <- seq(1, numSample/2)  # make sure that treat and control group are in pairs
fishGroup <- as.character(c(groupTreat, groupControl))
# generate the experiment group
expGroup <- c(rep('treat', numSample/2), rep('control', numSample/2))
# get the colData mixing the above 3 data
colData <- data.frame(samples, fishGroup, expGroup)
# creat the DESeqDataSet
dds_paird <- DESeqDataSetFromMatrix(countData, colData, design = ~ fishGroup + expGroup)
# perform DEA
dea_paired <- DESeq(dds_paird)
# result analysis
res_paired <- results(dea_paired)
# p-adjusted value
padj_paired <- res_paired$padj
# significantly expressed genes
sig_paired <- geneList[which(padj_paired < 0.05)]
write.csv(res_paired, args[2])
countTable <- read.table('./BaP_high_VS_control', header = T)
rownames(countTable) <- countTable[,1]
countData <- countTable[,-1] # remove Gene_id column to get pure count table
geneList <- rownames(countData)
samples <- colnames(countData)
View(countTable)
View(colData)
View(countTable)
getwd()
q()
