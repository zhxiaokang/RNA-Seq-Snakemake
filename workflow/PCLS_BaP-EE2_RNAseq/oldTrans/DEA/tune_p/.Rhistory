partial.auc=c(100, 90), partial.auc.correct=TRUE,
partial.auc.focus="sens",
# arguments for ci
ci=TRUE, boot.n=100, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,smooth = TRUE, algorithm = 2)
roc(aSAH$outcome, aSAH$s100b)
roc(outcome ~ s100b, aSAH)
# Smooth ROC curve
roc(outcome ~ s100b, aSAH, smooth=TRUE)
# more options, CI and plotting
roc1 <- roc(aSAH$outcome,
aSAH$s100b, percent=TRUE,
# arguments for auc
partial.auc=c(100, 90), partial.auc.correct=TRUE,
partial.auc.focus="sens",
# arguments for ci
ci=TRUE, boot.n=100, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,smooth = TRUE, algorithm = 1)
pred[1]
pred[2]<-0
pred[2]<-1
roc(pred,labels)
roc(aSAH$outcome, aSAH$s100b)
roc(outcome ~ s100b, aSAH)
# Smooth ROC curve
roc(outcome ~ s100b, aSAH, smooth=TRUE)
# more options, CI and plotting
roc1 <- roc(pred,
labels, percent=TRUE,
# arguments for auc
partial.auc=c(100, 90), partial.auc.correct=TRUE,
partial.auc.focus="sens",
# arguments for ci
ci=TRUE, boot.n=100, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,smooth = TRUE, algorithm = 2)
roc(aSAH$outcome, aSAH$s100b)
roc(outcome ~ s100b, aSAH)
# Smooth ROC curve
roc(outcome ~ s100b, aSAH, smooth=TRUE)
# more options, CI and plotting
roc1 <- roc(pred,
labels, percent=TRUE,
# arguments for auc
partial.auc=c(100, 90), partial.auc.correct=TRUE,
partial.auc.focus="sens",
# arguments for ci
ci=TRUE, boot.n=100, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,smooth = FALSE, algorithm = 2)
library(GeoDE)
data(example_expression_data)
remove(list=ls())
data(example_expression_data)
data(example_sampleclass)
data(example_gammas)
example_gammas
head(example_expression_data)
example_sampleclass
chdir_analysis_example <- chdirAnalysis(example_expression_data,example_sampleclass,example_gammas ,CalculateSig=TRUE,nnull=10)
lapply(chdir_analysis_example$results, function(x) x[1:10])
chdir_analysis_example$results
length(chdir_analysis_example$results)
nrow(chdir_analysis_example$results)
ncol(chdir_analysis_example$results)
size(chdir_analysis_example$results)
lapply(chdir_analysis_example$chdirprops[[1]],head)
chdir_analysis_example$chdirprops$number_sig_genes
length(example_expression_data$genenames)
chdirAnalysis(datain, sampleclass, gammas = list(1), nnull = 10, CalculateSig = FALSE)
chdirAnalysis(datain, example_sampleclass, gammas = list(1), nnull = 10, CalculateSig = FALSE)
chdirAnalysis(example_expression_data, example_sampleclass, gammas = list(1), nnull = 10, CalculateSig = FALSE)
class(example_sampleclass)
q()
library(ROCR)
data(ROCR.simple)
pred <- prediction( ROCR.simple$predictions, ROCR.simple$labels)
perf <- performance(pred,"tpr","fpr")
plot(perf)
ROCR.simple$predictions
ROCR.simple$labels
ROCR.simple$predictions
pred <- prediction( ROCR.simple$predictions, ROCR.simple$labels)
pred<-c(1,0,1,1)
label<-c(10,1,0)
label<-c(1,0,1,0)
preds<-prediction(pred,label)
preds
perf <- performance(preds,"tpr","fpr")
perf
library('pROC')
data(aSAH)
# Syntax (response, predictor):
auc(aSAH$outcome, aSAH$s100b)
auc(pred,label)
q()
data("iris")
head(iris)
View(iris)
ird <- data.frame(rbind(iris3[,,1], iris3[,,2], iris3[,,3]),
species = factor(c(rep("s",50), rep("c", 50), rep("v", 50))))
iris3
iris
iris1
iris3[,,1]
iris3[,,2]
x<-matrix(c(1,2,3,4),2,2)
y<-matrix(c(5,6,7,8),2,2)
cbind(x,y)
rbind(x,y)
View(ird)
View(ird)
View(iris)
data(diamonds)
library(ggplot2)
data(diamonds)
class(diamonds)
library(data.table)
dataframe<-data.table(diamonds)
class(dataframe)
test<-data.frame(student=c('xiaoming','xiaohong','xiaogang'),math=c(89,90,78),english=c(97,69,90))
test
?tableGrod
??tableGrod
grid.arrange(test)
?tableGrob
library(gridExtra)
tableGrob(test)
grid.table(test)
text<-tableGrob(test)
grid.arrange(text)
grid.arrange(text)
text<-tableGrob(test,rows=NULL)
grid.arrange(text)
grid.table(test,rows=NULL)
??grid.table
q()
source("http://bioconductor.org/biocLite.R")
biocLite("GOSemSim")
library(GOSemSim)
go1<-c('GO:0005739','GO:0005777','GO:0004169','GO:0006493')
go2<-c('GO:0005739','GO:0005777','GO:0004169','GO:0006499')
mgoSim(go1,go2,ont='MF',organism='human',measure='Wang')
mgoSim(go1,go2,measure = 'Wang')
?mgoSim
d <- godata('org.Hs.eg.db', ont="MF", computeIC=FALSE)
install.packages('org.Hs.eg.db')
source("http://bioconductor.org/biocLite.R")
biocLite('org.Hs.eg.db')
d <- godata('org.Hs.eg.db', ont="MF", computeIC=FALSE)
mgoSim(go1, go2, semData=d, measure="Wang")
go1
go2
mgoSim(go1, go2, semData=d, measure="Resnik")
mgoSim(go1, go2, semData=d, measure="Lin")
mgoSim(go1, go2, semData=d, measure="Wang")
mgoSim(go1, go2, semData=d, measure="Jiang")
?godata
d <- godata('org.Hs.eg.db', ont="BP", computeIC=FALSE)
mgoSim(go1, go2, semData=d, measure="Wang")
d <- godata('org.Hs.eg.db', ont="CC", computeIC=FALSE)
mgoSim(go1, go2, semData=d, measure="Wang")
d <- godata('org.Hs.eg.db', ont="BP", computeIC=TRUE)
mgoSim(go1, go2, semData=d, measure="Wang")
d <- godata('org.Hs.eg.db', ont="MF", computeIC=TRUE)
mgoSim(go1, go2, semData=d, measure="Wang")
go2<-c('GO:0005739','GO:0005777','GO:0004169','GO:0006490')
mgoSim(go1, go2, semData=d, measure="Wang")
go2<-c('GO:0005739','GO:0005777','GO:0004169','GO:0008490')
mgoSim(go1, go2, semData=d, measure="Wang")
go2<-c('GO:0005739','GO:0005777','GO:0004169','0008490')
mgoSim(go1, go2, semData=d, measure="Wang")
go2<-c('GO:0005739','GO:0005777','0004169','0008490')
go2<-c('GO:0005739','0005777','0004169','0008490')
go2<-c('0005739','0005777','0004169','0008490')
mgoSim(go1, go2, semData=d, measure="Wang")
go2<-c('GO:0005739','0005777','0004169','0008490')
mgoSim(go1, go2, semData=d, measure="Wang")
go2<-c('GO:0005739','GO:0005777','0004169','0008490')
mgoSim(go1, go2, semData=d, measure="Wang")
1/3
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
exit
quit
q()
lens <- c(900, 1020, 2000, 770, 3000, 1777)
sum(lens)
sum(lens)/len(lens)
sum(lens)/length(lens)
length(lens)
control<-c(0,0,0,0,0,1,1,1)
drug<-c(0,0,0,0,1,1,1,1)
control<-data.frame(control)
drug<-data.frame(drug)
df<-rbind(data.frame(fill='green',obs=control$control),data.frame(fill='red',obs=drug$drug))
ggplot(df, aes(x=obs, fill=fill)) +
geom_histogram(binwidth=1, colour="black", position="dodge") +
scale_fill_identity()
library(ggplot)
library(ggplot2)
ggplot(df, aes(x=obs, fill=fill)) +
geom_histogram(binwidth=1, colour="black", position="dodge") +
scale_fill_identity()
View(control)
ggplot(df, aes(x=obs, fill=fill)) +
geom_histogram(binwidth=.1, colour="black", position="dodge") +
scale_fill_identity()
View(control)
which(control$control==1)
length(control$control)
length(control$control==1)
length(control==1)
seq(1,100)
q()
source("https://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
biocLite("edgeR")
sessionInfo()
library(edgeR)
countTable <- read.table('./Mix_high_VS_control', header = T)
setwd('/Users/xzh004/GitHub/RNA-Seq-Snakemake/workflow/PCLS_BaP-EE2_RNAseq/oldTrans/DEA')
countTable <- read.table('./Mix_high_VS_control', header = T)
rownames(countTable) <- countTable[,1]
countData <- countTable[,-1] # remove Gene_id column to get pure count table
geneList <- rownames(countData)
samples <- colnames(countData)
numSample <- length(samples)
groupTreat <- seq(1, numSample/2)  # index different fish group
groupControl <- seq(1, numSample/2)  # make sure that treat and control group are in pairs
fishGroup <- as.character(c(groupTreat, groupControl))
expGroup <- c(rep('treat', numSample/2), rep('control', numSample/2))
colData <- data.frame(samples, fishGroup, expGroup)
View(countData)
View(countTable)
y<-DGEList(counts = countTable[,2:13], genes = countTable[,1])
y$samples$lib.size<-colSums(y$counts)
rownames(y$counts)<-rownames(y$genes) <- y$genes$genes
head(y$genes)
y$genes$genes <- NULL
y <- calcNormFactors(y)
head(y$samples)
y$samples
plotMDS(y)
fishGroup
fishGroup <- factor(c(groupTreat, groupControl))
fishGroup
expGroup <- factor(rep('treat', numSample/2), rep('control', numSample/2))
expGroup <- factor(c(rep('treat', numSample/2), rep('control', numSample/2)))
expGroup
data.frame(Sample = colnames(y), fishGroup, expGroup)
design <- model.matrix(~fishGroup+expGroup)
rownames(design) <- colnames(y)
design
y <- estimateDisp(y, design, robust = TRUE)
install.packages('statmod')
library(statmod)
y <- estimateDisp(y, design, robust = TRUE)
y$common.dispersion
plotBCV(y)
fit <- glmFit(y, design)
lrt <- glmLRT(fit)
topTags(lrt)
colnames(design)
o<-order(lrt$table$PValue)
cpm(y)[o[1:10],]
summary(dicideTests(lrt))
summary(decideTests(lrt))
topTags(lrt)
plotMD(lrt)
abline(h=c(-1,1), col='blue')
library(ggplot2)
plotMD(lrt)
abline(h=c(-1,1), col='blue')
topTags(lrt,p.value = 0.05)
topTags(lrt,n=100,p.value = 0.05)
deGenes <- decideTestsDGE(lrt, p=0.001)
deGenes <- rownames(lrt)[as.logical(deGenes)]
plotSmear(lrt, de.tags=deGenes)
abline(h=c(-1, 1), col=2)
res <- exactTest(y)
y
y$samples$group
plotMDS(y, method="bcv", col=as.numeric(y$samples$group))
y$counts
y$samples
y$genes
y$samples
y$samples$group <- factor(factor(c(rep('treat', numSample/2), rep('control', numSample/2))))
plotMDS(y, method="bcv", col=as.numeric(y$samples$group))
rownames(y$counts) <- rownames(y$genes) <- y$genes$genes
y$genes$genes <- NULL
y <- calcNormFactors(y)
numSample <- length(samples)
groupTreat <- seq(1, numSample/2)  # index different fish group
groupControl <- seq(1, numSample/2)  # make sure that treat and control group are in pairs
fishGroup <- factor(c(groupTreat, groupControl))
expGroup <- factor(c(rep('treat', numSample/2), rep('control', numSample/2)))
design <- model.matrix(~fishGroup+expGroup)
rownames(design) <- colnames(y)
y <- estimateDisp(y, design, robust = TRUE)
fit <- glmFit(y, design)
lrt <- glmLRT(fit)
geneList <- rownames(countData)
plotBCV(y)
et <- exactTest(y)
topTags(et)
fit <- glmFit(y, design)
lrt <- glmLRT(fit)
topTags(lrt)
decideTestsDGE(lrt, adjust.method="BH", p.value=0.05)
de<-decideTestsDGE(lrt, adjust.method="BH", p.value=0.05)
summary(de)
de1tags12 <- rownames(y)[as.logical(de)]
plotSmear(lrt, de.tags=de1tags12)
abline(h = c(-2, 2), col = "blue")
de <- decideTestsDGE(lrt, adjust.method="BH", p.value = 0.05)
detags <- rownames(y)[as.logical(de)]
plotSmear(lrt, de.tags=detags)
abline(h = c(-2, 2), col = "blue")
de
summary(de)
topTags(lrt)
countTable <- read.table('./Mix_high_VS_control', header = T)
rownames(countTable) <- countTable[,1]
countData <- countTable[,-1] # remove Gene_id column to get pure count table
y <- DGEList(counts = countTable[,2:13], genes = countTable[,1])
y$samples$lib.size<-colSums(y$counts)
rownames(y$counts) <- rownames(y$genes) <- y$genes$genes
y$genes$genes <- NULL
y <- calcNormFactors(y)
numSample <- length(samples)
groupTreat <- seq(1, numSample/2)  # index different fish group
groupControl <- seq(1, numSample/2)  # make sure that treat and control group are in pairs
fishGroup <- factor(c(groupTreat, groupControl))
expGroup <- factor(c(rep('treat', numSample/2), rep('control', numSample/2)))
design <- model.matrix(~fishGroup+expGroup)
rownames(design) <- colnames(y)
y <- estimateDisp(y, design, robust = TRUE)
fit <- glmFit(y, design)
lrt <- glmLRT(fit)
topTags(lrt)
deg <- decideTestsDGE(lrt, adjust.method="BH", p.value = 0.05)
deGenes
remove(list = ls())
countTable <- read.table('./Mix_high_VS_control', header = T)
rownames(countTable) <- countTable[,1]
countData <- countTable[,-1] # remove Gene_id column to get pure count table
y <- DGEList(counts = countTable[,2:13], genes = countTable[,1])
y$samples$lib.size<-colSums(y$counts)
rownames(y$counts) <- rownames(y$genes) <- y$genes$genes
y$genes$genes <- NULL
y <- calcNormFactors(y)
numSample <- length(samples)
geneList <- rownames(countData)
samples <- colnames(countData)
y <- DGEList(counts = countTable[,2:13], genes = countTable[,1])
y$samples$lib.size<-colSums(y$counts)
rownames(y$counts) <- rownames(y$genes) <- y$genes$genes
y$genes$genes <- NULL
y <- calcNormFactors(y)
numSample <- length(samples)
groupTreat <- seq(1, numSample/2)  # index different fish group
groupControl <- seq(1, numSample/2)  # make sure that treat and control group are in pairs
fishGroup <- factor(c(groupTreat, groupControl))
expGroup <- factor(c(rep('treat', numSample/2), rep('control', numSample/2)))
design <- model.matrix(~fishGroup+expGroup)
rownames(design) <- colnames(y)
y <- estimateDisp(y, design, robust = TRUE)
fit <- glmFit(y, design)
lrt <- glmLRT(fit)
deg <- decideTestsDGE(lrt, adjust.method="BH", p.value = 0.05)
summary(deg)
detags <- rownames(y)[as.logical(deg)]
plotSmear(lrt, de.tags=detags)
abline(h = c(-2, 2), col = "blue")
summary(deg)
source('edger_test.R')
summary(deg)
source('edger_test.R')
samples
View(countTable)
source('edger_test.R')
summary(deg)
topTags(lrt)
topTags(lrt,n=16)
topTags(lrt,p.value = 0.05)
topTags(lrt,p.value = 0.05,n=20)
plotMDS(y)
lrt$coefficients
lrt$samples
topTags(lrt)
toptag<-topTags(lrt, n = length(geneList), p.value = 0.05)
toptag
rownames(toptag$table)
source('edger_test.R')
deg
deg
source('edger_test.R')
deg
countTable(which(countTable$Gene_id='ENSGMOG00000016012'))
countTable[which(countTable$Gene_id='ENSGMOG00000016012'),]
countTable[which(countTable$Gene_id=='ENSGMOG00000016012'),]
countTable[which(countTable$Gene_id=='ENSGMOG00000016012'),]
countTable[which(countTable$Gene_id=='ENSGMOG00000016366'),]
source('edger_test.R')
source('edger_test.R')
source('edger_test.R')
source('edger_test.R')
source('edger_test.R')
source('edger_test.R')
source('edger_test.R')
toptag
toptag$table
source('edger_test.R')
source('edger_test.R')
source('edger_test.R')
source('edger_test.R')
source('edger_test.R')
source('edger_test.R')
de
lrt
?DESeq2
library(DESeq2)
?DESeq
?t.test
temp<-lrt$table
View(temp)
deg
temp[ENSGMOG00000000001]
temp(which(rownames(temp)==ENSGMOG00000000001))
temp[which(rownames(temp)==ENSGMOG00000000001)]
class(temp)
temp['ENSGMOG00000000001']
temp[row.names(temp)=='ENSGMOG00000000001']
temp[which(rownames(temp)=='ENSGMOG00000000001')]
which(rownames(temp)=='ENSGMOG00000000001')
temp[which(rownames(temp)=='ENSGMOG00000000001'),]
head(deg)
temp[which(rownames(temp)=='ENSGMOG00000018930'),]
source('edger_test.R')
source('edger_test.R')
source('edger_test.R')
source('edger_test.R')
source('edger_test.R')
source('edger_test.R')
help()
install.packages('vcd')
?vcd
?vcd()
help.start()
data()
help(package='vcd')
library(vccd)
library(vcd)
help(Arthristis)
help("Arthritis")
?Arthritis
data('Arthritis')
rm(list=ls())
?Arthritis
Arthritis
example('Arthritis')
history()
history(10)
history()
q()
setwd('/Users/xzh004/GitHub/RNA-Seq-Snakemake/workflow/PCLS_BaP-EE2_RNAseq/oldTrans/DEA/deg_list')
setwd('/Users/xzh004/GitHub/RNA-Seq-Snakemake/workflow/PCLS_BaP-EE2_RNAseq/oldTrans/DEA/tune_p')
library(openxlsx)
dataBaP.low <- read.xlsx('table.xlsx', sheet = 1, colNames = T, rowNames = T)
View(dataBaP.low)
barplot(t(as.matrix(dataBaP.low)),ylim=c(0,1),xlab='P-Value',ylab="Portion",main="Portions",col=rainbow(4),font=2,cex.lab=1.4)
dataEE2.low <- read.xlsx('table.xlsx', sheet = 3, colNames = T, rowNames = T)
barplot(t(as.matrix(dataEE2.low)),ylim=c(0,1),xlab='P-Value',ylab="Portion",main="Portions",col=rainbow(4),font=2,cex.lab=1.4)
barplot(t(as.matrix(dataEE2.low)),ylim=c(0,1),xlab='P-Value',ylab="Proportion",main="Proportions",col=rainbow(4),font=2,cex.lab=1.4)
barplot(t(as.matrix(dataBaPLow.low)),ylim=c(0,1),xlab='P-Value',ylab="Proportion",main="Proportions",col=rainbow(4),font=2,cex.lab=1.4)
barplot(t(as.matrix(dataBaP.low)),ylim=c(0,1),xlab='P-Value',ylab="Proportion",main="Proportions",col=rainbow(4),font=2,cex.lab=1.4)
barplot(t(as.matrix(dataBaP.low)),ylim=c(0,1),xlab='P-Value',ylab="Proportion",main="Proportions",col=rainbow(3),font=2,cex.lab=1.4)
legend("topright",legend=c("DESeq2_uniq","Overlap","edgeR_uniq"),pch=15,col=rainbow(4))
legend("topright",legend=c("DESeq2_uniq","Overlap","edgeR_uniq"),pch=15,col=rainbow(3))
legend("topright",legend=c("DESeq2_uniq","Overlap","edgeR_uniq"),pch=15,col=rainbow(5))
legend("topright",legend=c("DESeq2_uniq","Overlap","edgeR_uniq"),pch=15,col=rainbow(3))
legend("topright",legend=c("DESeq2_uniq","Overlap","edgeR_uniq"),pch=15,col=rainbow(3))
legend("topleft",legend=c("DESeq2_uniq","Overlap","edgeR_uniq"),pch=15,col=rainbow(3))
barplot(t(as.matrix(dataBaP.low)),ylim=c(0,1),xlab='P-Value',ylab="Proportion",main="Proportions",col=rainbow(3),font=2,cex.lab=1.4)
legend("topleft",legend=c("DESeq2_uniq","Overlap","edgeR_uniq"),pch=15,col=rainbow(4))
library(openxlsx)
dataBaP.low <- read.xlsx('table.xlsx', sheet = 1, colNames = T, rowNames = T)
dataBaP.high <- read.xlsx('table.xlsx', sheet = 2, colNames = T, rowNames = T)
dataEE2.low <- read.xlsx('table.xlsx', sheet = 3, colNames = T, rowNames = T)
dataEE2.high <- read.xlsx('table.xlsx', sheet = 4, colNames = T, rowNames = T)
dataMix.low <- read.xlsx('table.xlsx', sheet = 5, colNames = T, rowNames = T)
dataMix.high <- read.xlsx('table.xlsx', sheet = 6, colNames = T, rowNames = T)
barplot(t(as.matrix(dataBaP.low)),ylim=c(0,1),xlab='P-Value',ylab="Proportion",main="Proportions",col=rainbow(3),font=2,cex.lab=1.4)
legend("topleft",legend=c("DESeq2_uniq","Overlap","edgeR_uniq"),pch=15,col=rainbow(3))
barplot(t(as.matrix(dataBaP.high)),ylim=c(0,1),xlab='P-Value',ylab="Proportion",main="Proportions",col=rainbow(3),font=2,cex.lab=1.4)
legend("topleft",legend=c("DESeq2_uniq","Overlap","edgeR_uniq"),pch=15,col=rainbow(3))
barplot(t(as.matrix(dataEE2.low)),ylim=c(0,1),xlab='P-Value',ylab="Proportion",main="Proportions",col=rainbow(3),font=2,cex.lab=1.4)
legend("topleft",legend=c("DESeq2_uniq","Overlap","edgeR_uniq"),pch=15,col=rainbow(3))
barplot(t(as.matrix(dataEE2.high)),ylim=c(0,1),xlab='P-Value',ylab="Proportion",main="Proportions",col=rainbow(3),font=2,cex.lab=1.4)
legend("topleft",legend=c("DESeq2_uniq","Overlap","edgeR_uniq"),pch=15,col=rainbow(3))
barplot(t(as.matrix(dataMix.low)),ylim=c(0,1),xlab='P-Value',ylab="Proportion",main="Proportions",col=rainbow(3),font=2,cex.lab=1.4)
legend("topleft",legend=c("DESeq2_uniq","Overlap","edgeR_uniq"),pch=15,col=rainbow(3))
barplot(t(as.matrix(dataMix.high)),ylim=c(0,1),xlab='P-Value',ylab="Proportion",main="Proportions",col=rainbow(3),font=2,cex.lab=1.4)
legend("topleft",legend=c("DESeq2_uniq","Overlap","edgeR_uniq"),pch=15,col=rainbow(3))
